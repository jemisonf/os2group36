Common subdirectories: drivers/block/aoe and ../block_backup/aoe
Common subdirectories: drivers/block/drbd and ../block_backup/drbd
diff -c drivers/block/Kconfig ../block_backup/Kconfig
*** drivers/block/Kconfig	2018-05-26 16:56:44.247316436 -0700
--- ../block_backup/Kconfig	2018-05-26 16:55:40.575209360 -0700
***************
*** 33,38 ****
--- 33,43 ----
  	  To compile this driver as a module, choose M here: the
  	  module will be called floppy.
  
+ config BLK_DEV_SBD
+ 	tristate "Simple Block Driver"
+ 	---help--- 
+ 	   An encrypted simple block driver
+ 
  config AMIGA_FLOPPY
  	tristate "Amiga floppy support"
  	depends on AMIGA
Common subdirectories: drivers/block/mtip32xx and ../block_backup/mtip32xx
Common subdirectories: drivers/block/paride and ../block_backup/paride
Common subdirectories: drivers/block/rsxx and ../block_backup/rsxx
diff -c drivers/block/sbd.c ../block_backup/sbd.c
*** drivers/block/sbd.c	2018-05-26 16:58:00.713644910 -0700
--- ../block_backup/sbd.c	2018-05-26 16:55:40.591209638 -0700
***************
*** 0 ****
--- 1,227 ----
+ /*
+  * A sample, extra-simple block driver. Updated for kernel 2.6.31.
+  *
+  * (C) 2003 Eklektix, Inc.
+  * (C) 2010 Pat Patterson <pat at superpat dot com>
+  * Redistributable under the terms of the GNU GPL.
+  */
+ 
+ #include <linux/module.h>
+ #include <linux/moduleparam.h>
+ #include <linux/init.h>
+ 
+ #include <linux/kernel.h> /* printk() */
+ #include <linux/fs.h>     /* everything... */
+ #include <linux/errno.h>  /* error codes */
+ #include <linux/types.h>  /* size_t */
+ #include <linux/vmalloc.h>
+ #include <linux/genhd.h>
+ #include <linux/blkdev.h>
+ #include <linux/hdreg.h>
+ #include <linux/crypto.h>
+ 
+ 
+ //default encryption key if none is passes as parameter
+ static char *super_secret_key = "defaultEncKey";
+ //allows for key to be passed to module
+ module_param(super_secret_key, charp, 0400);
+ 
+ //+ to be used in crypto functions
+ struct crypto_cipher *tfm;
+ 
+ 
+ MODULE_LICENSE("Dual BSD/GPL");
+ static char *Version = "1.4";
+ 
+ static int major_num = 0;
+ module_param(major_num, int, 0);
+ static int logical_block_size = 512;
+ module_param(logical_block_size, int, 0);
+ static int nsectors = 1024; /* How big the drive is */
+ module_param(nsectors, int, 0);
+ 
+ /*
+  * We can tweak our hardware sector size, but the kernel talks to us
+  * in terms of small sectors, always.
+  */
+ #define KERNEL_SECTOR_SIZE 512
+ 
+ 
+ /*
+  * Our request queue.
+  */
+ static struct request_queue *Queue;
+ 
+ /*
+  * The internal representation of our device.
+  */
+ static struct sbd_device {
+ 	unsigned long size;
+ 	spinlock_t lock;
+ 	u8 *data;
+ 	struct gendisk *gd;
+ } Device;
+ 
+ /*
+  * Handle an I/O request.
+  */
+ static void sbd_transfer(struct sbd_device *dev, 
+ 		         sector_t sector,
+ 	                 unsigned long nsect, 
+ 			 char *buffer, 
+ 			 int write) {
+ 	unsigned long offset = sector * logical_block_size;
+ 	unsigned long nbytes = nsect * logical_block_size;
+ 	int i;
+ 
+ 	// offset prinout (from original)
+ 	if ((offset + nbytes) > dev->size) {
+ 		printk ("sbd: Beyond-end write (%ld %ld)\n", offset, nbytes);
+ 		return;
+ 	}
+ 
+ 	crypto_cipher_setkey(tfm, super_secret_key, strlen(super_secret_key));
+ 
+ 	
+ 	//+ Change to write functionality instead of memcpy from original
+ 	if (write){
+ 		for(i = 0; i < nbytes; i += crypto_cipher_blocksize(tfm)){				
+ 			printk ("Enc byte %d of %d\n", i, crypto_cipher_blocksize(tfm));
+ 			crypto_cipher_encrypt_one(tfm, dev->data + offset + i, buffer + i);
+ 		}
+ 	}
+ 
+ 	else{
+ 		for(i=0; i<nbytes; i += crypto_cipher_blocksize(tfm)){
+ 
+ 			// if not a write operation it's a decryption
+ 			printk ("Decrypting byte %d of %d\n", i, crypto_cipher_blocksize(tfm));
+ 			crypto_cipher_decrypt_one(tfm, buffer + i, dev->data + offset + i);
+ 		}
+ 	}
+ 	//+
+ }
+ 
+ static void sbd_request(struct request_queue *q) {
+ 	struct request *req;
+ 
+ 	req = blk_fetch_request(q);
+ 	while (req != NULL) {
+ 		// blk_fs_request() was removed in 2.6.36 - many thanks to
+ 		// Christian Paro for the heads up and fix...
+ 		//if (!blk_fs_request(req)) {
+ 		if (req == NULL || (req->cmd_type != REQ_TYPE_FS)) {
+ 			printk (KERN_NOTICE "Skip non-CMD request\n");
+ 			__blk_end_request_all(req, -EIO);
+ 			continue;
+ 		}
+ 		sbd_transfer(&Device, blk_rq_pos(req), blk_rq_cur_sectors(req),
+ 			bio_data(req->bio), rq_data_dir(req));
+ 		if ( ! __blk_end_request_cur(req, 0) ) {
+ 			req = blk_fetch_request(q);
+ 		}
+ 	}
+ }
+ 
+ /*
+  * The HDIO_GETGEO ioctl is handled in blkdev_ioctl(), which
+  * calls this. We need to implement getgeo, since we can't
+  * use tools such as fdisk to partition the drive otherwise.
+  */
+ int sbd_getgeo(struct block_device * block_device, struct hd_geometry * geo) {
+ 	long size;
+ 
+ 	/* We have no real geometry, of course, so make something up. */
+ 	size = Device.size * (logical_block_size / KERNEL_SECTOR_SIZE);
+ 	geo->cylinders = (size & ~0x3f) >> 6;
+ 	geo->heads = 4;
+ 	geo->sectors = 16;
+ 	geo->start = 0;
+ 	return 0;
+ }
+ 
+ /*
+  * The device operations structure.
+  */
+ static struct block_device_operations sbd_ops = {
+ 	.owner  = THIS_MODULE,
+ 	.getgeo = sbd_getgeo
+ };
+ 
+ static int __init sbd_init(void) {
+ 
+ //+
+ 	printk (KERN_DEBUG "initialization of sbd_init");
+ 
+ 	//allocate single block cipher handle, used in all API calls
+ 	tfm = crypto_alloc_cipher("aes", 0, 0);
+ 
+ 	if(IS_ERR(tfm)){
+ 		printk(KERN_ERR "CYPHER CREATION FAIL!");
+ 		return PTR_ERR(tfm);
+ 	}
+ //+
+ 
+ 	/*
+ 	 * Set up our internal device.
+ 	 */
+ 	Device.size = nsectors * logical_block_size;
+ 	spin_lock_init(&Device.lock);
+ 	Device.data = vmalloc(Device.size);
+ 	if (Device.data == NULL){
+ 		return -ENOMEM;
+ 	}
+ 	/*
+ 	 * Get a request queue.
+ 	 */
+ 	Queue = blk_init_queue(sbd_request, &Device.lock);
+ 	if (Queue == NULL)
+ 		goto out;
+ 	blk_queue_logical_block_size(Queue, logical_block_size);
+ 	/*
+ 	 * Get registered.
+ 	 */
+ 	major_num = register_blkdev(major_num, "sbd");
+ 	if (major_num < 0) {
+ 		printk(KERN_WARNING "sbd: unable to get major number\n");
+ 		goto out;
+ 	}
+ 	/*
+ 	 * And the gendisk structure.
+ 	 */
+ 	Device.gd = alloc_disk(16);
+ 	if (!Device.gd)
+ 		goto out_unregister;
+ 	Device.gd->major = major_num;
+ 	Device.gd->first_minor = 0;
+ 	Device.gd->fops = &sbd_ops;
+ 	Device.gd->private_data = &Device;
+ 	strcpy(Device.gd->disk_name, "sbd0");
+ 	set_capacity(Device.gd, nsectors);
+ 	Device.gd->queue = Queue;
+ 	add_disk(Device.gd);
+ 
+ 	return 0;
+ 
+ 	out_unregister:
+ 	unregister_blkdev(major_num, "sbd");
+ 	out:
+ 	vfree(Device.data);
+ 	return -ENOMEM;
+ }
+ 
+ static void __exit sbd_exit(void)
+ {
+ 	del_gendisk(Device.gd);
+ 	put_disk(Device.gd);
+ 
+ 	//free the single block cipher handle
+ 	crypto_free_cipher(tfm);
+ 
+ 	unregister_blkdev(major_num, "sbd");
+ 	blk_cleanup_queue(Queue);
+ 	vfree(Device.data);
+ }
+ 
+ module_init(sbd_init);
+ module_exit(sbd_exit);
Common subdirectories: drivers/block/xen-blkback and ../block_backup/xen-blkback
Common subdirectories: drivers/block/zram and ../block_backup/zram
